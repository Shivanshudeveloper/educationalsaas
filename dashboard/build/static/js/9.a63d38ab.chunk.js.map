{"version":3,"sources":["views/pages/authentication/firebase-forms/FirebaseGoogleLogin.js","views/pages/authentication/firebase-forms/FirebaseTwitterLogin.js","views/pages/authentication/authentication3/Login3.js"],"names":["FirebaseGoogleLogin","navigate","useNavigate","AnimateButton","Button","disableElevation","fullWidth","size","type","onClick","auth","signInWithPopup","googleProvider","then","result","credential","accessToken","user","console","log","sessionStorage","setItem","displayName","email","uid","photoURL","axios","post","TEST_API_SERVICE","res","catch","err","error","code","message","sx","backgroundColor","border","src","height","style","marginRight","FirebaseTwitterLogin","twitterProvider","Login","theme","useTheme","matchDownSM","useMediaQuery","breakpoints","down","AuthWrapper1","Grid","container","direction","justifyContent","minHeight","item","xs","alignItems","m","sm","mb","AuthCardWrapper","width","spacing","Stack","Typography","color","palette","secondary","main","gutterBottom","variant","fontSize","textAlign","FirebaseLogin","login","Divider","mt","AuthFooter"],"mappings":"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","file":"static/js/9.a63d38ab.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { auth, googleProvider } from \"../../../../Firebase\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { TEST_API_SERVICE } from \"../../../../config\";\r\nimport axios from \"axios\";\r\nimport AnimateButton from \"ui-component/extended/AnimateButton\";\r\nimport { Button } from \"@material-ui/core\";\r\nconst FirebaseGoogleLogin = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const signInWithGoogle = () =>\r\n    auth\r\n      .signInWithPopup(googleProvider)\r\n      .then((result) => {\r\n        // @type {firebase.auth.OAuthCredential}\r\n        var credential = result.credential;\r\n\r\n        // This gives you a Google Access Token. You can use it to access the Google API.\r\n        var token = credential.accessToken;\r\n        // The signed-in user info.\r\n        var user = result.user;\r\n        // console.log(user);\r\n        if (user) {\r\n          console.log(user);\r\n          sessionStorage.setItem(\"userName\", user.displayName);\r\n          sessionStorage.setItem(\"userEmail\", user.email);\r\n          sessionStorage.setItem(\"userId\", user.uid);\r\n          sessionStorage.setItem(\"logo\", user.photoURL);\r\n          axios\r\n            .post(`${TEST_API_SERVICE}/getuserbyemail`, {\r\n              email: user.email,\r\n            })\r\n            .then((res) => {\r\n              navigate(\"/dashboard/default\");\r\n            })\r\n            .catch((err) => console.log(err));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        // Handle Errors here.\r\n        var errorCode = error.code;\r\n        var errorMessage = error.message;\r\n        // The email of the user's account used.\r\n        var email = error.email;\r\n        // The firebase.auth.AuthCredential type that was used.\r\n        var credential = error.credential;\r\n        // ...\r\n      });\r\n\r\n  return (\r\n    <div>\r\n      <AnimateButton>\r\n        <Button\r\n          disableElevation\r\n          fullWidth\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          // variant=\"contained\"\r\n          onClick={signInWithGoogle}\r\n          sx={{ backgroundColor: \"#fff\", border: \"1px solid #afafaf\" }}\r\n        >\r\n          <img\r\n            src=\"https://img.icons8.com/color/48/000000/google-logo.png\"\r\n            height={25}\r\n            style={{ marginRight: \"20px\" }}\r\n          />\r\n          Sign in with google\r\n        </Button>\r\n      </AnimateButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FirebaseGoogleLogin;\r\n","import React from \"react\";\r\nimport { auth, twitterProvider } from \"../../../../Firebase\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { TEST_API_SERVICE } from \"../../../../config\";\r\nimport axios from \"axios\";\r\nimport AnimateButton from \"ui-component/extended/AnimateButton\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nconst FirebaseTwitterLogin = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const signInWithTwitter = () =>\r\n    auth\r\n      .signInWithPopup(twitterProvider)\r\n      .then((result) => {\r\n        // @type {firebase.auth.OAuthCredential}\r\n        var credential = result.credential;\r\n        console.log(result);\r\n\r\n        // This gives you a Google Access Token. You can use it to access the Google API.\r\n        var token = credential.accessToken;\r\n        // The signed-in user info.\r\n        var user = result.user;\r\n        // console.log(user);\r\n        if (user) {\r\n          console.log(user);\r\n          sessionStorage.setItem(\"userName\", user.displayName);\r\n          sessionStorage.setItem(\"userEmail\", user.email);\r\n          sessionStorage.setItem(\"userId\", user.uid);\r\n          sessionStorage.setItem(\"logo\", user.photoURL);\r\n          axios\r\n            .post(`${TEST_API_SERVICE}/getuserbyemail`, {\r\n              email: user.email,\r\n            })\r\n            .then((res) => {\r\n              navigate(\"/dashboard/default\");\r\n            })\r\n            .catch((err) => console.log(err));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        // Handle Errors here.\r\n        var errorCode = error.code;\r\n        var errorMessage = error.message;\r\n        // The email of the user's account used.\r\n        var email = error.email;\r\n        // The firebase.auth.AuthCredential type that was used.\r\n        var credential = error.credential;\r\n        // ...\r\n      });\r\n\r\n  return (\r\n    <div>\r\n      <AnimateButton>\r\n        <Button\r\n          disableElevation\r\n          fullWidth\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          // variant=\"contained\"\r\n          onClick={signInWithTwitter}\r\n          sx={{ backgroundColor: \"#fff\", border: \"1px solid #afafaf\" }}\r\n        >\r\n          <img\r\n            src=\"https://img.icons8.com/color/48/000000/twitter--v1.png\"\r\n            height={25}\r\n            style={{ marginRight: \"20px\" }}\r\n          />\r\n          Sign in with Twitter\r\n        </Button>\r\n      </AnimateButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FirebaseTwitterLogin;\r\n","import React from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n\r\n// material-ui\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport {\r\n  Divider,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  useMediaQuery,\r\n  Box,\r\n} from \"@material-ui/core\";\r\n\r\n// project imports\r\nimport AuthWrapper1 from \"../AuthWrapper1\";\r\nimport AuthCardWrapper from \"../AuthCardWrapper\";\r\nimport FirebaseLogin from \"../firebase-forms/FirebaseLogin\";\r\nimport AuthFooter from \"ui-component/cards/AuthFooter\";\r\nimport FirebaseGoogleLogin from \"../firebase-forms/FirebaseGoogleLogin\";\r\nimport FirebaseFacebookLogin from \"../firebase-forms/FirebaseFacebookLogin\";\r\nimport FirebaseTwitterLogin from \"../firebase-forms/FirebaseTwitterLogin\";\r\n\r\n// assets\r\n\r\n//= ===============================|| AUTH3 - LOGIN ||================================//\r\n\r\nconst Login = () => {\r\n  const theme = useTheme();\r\n  const matchDownSM = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n\r\n  return (\r\n    <AuthWrapper1>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        justifyContent=\"flex-end\"\r\n        sx={{ minHeight: \"100vh\" }}\r\n      >\r\n        <Grid item xs={12}>\r\n          <Grid\r\n            container\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            sx={{ minHeight: \"calc(100vh - 68px)\" }}\r\n          >\r\n            <Grid item sx={{ m: { xs: 1, sm: 3 }, mb: 0 }}>\r\n              <AuthCardWrapper>\r\n                <Grid item xs={12}>\r\n                  <center\r\n                    sx={{\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={process.env.PUBLIC_URL + \"/logo.png\"}\r\n                      height=\"50%\"\r\n                      width=\"50%\"\r\n                    />\r\n                  </center>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  spacing={2}\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"center\"\r\n                >\r\n                  <Grid item xs={12}>\r\n                    <Grid\r\n                      container\r\n                      direction={matchDownSM ? \"column-reverse\" : \"row\"}\r\n                      alignItems=\"center\"\r\n                      justifyContent=\"center\"\r\n                    >\r\n                      <Grid item>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          spacing={1}\r\n                        >\r\n                          <Typography\r\n                            color={theme.palette.secondary.main}\r\n                            gutterBottom\r\n                            variant={matchDownSM ? \"h3\" : \"h2\"}\r\n                          >\r\n                            Hi, Welcome to Evanalin\r\n                          </Typography>\r\n                          <Typography\r\n                            variant=\"caption\"\r\n                            fontSize=\"16px\"\r\n                            textAlign={matchDownSM ? \"center\" : \"\"}\r\n                          >\r\n                            Enter your credentials to continue\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <FirebaseLogin login={3} />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <Divider>OR</Divider>\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <FirebaseGoogleLogin />\r\n                  </Grid>\r\n                  {/* <Grid item xs={12}>\r\n                    <FirebaseFacebookLogin />\r\n                  </Grid> */}\r\n                  <Grid item xs={12}>\r\n                    <FirebaseTwitterLogin />\r\n                  </Grid>\r\n                </Grid>\r\n              </AuthCardWrapper>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12} sx={{ m: 3, mt: 1 }}>\r\n          <AuthFooter />\r\n        </Grid>\r\n      </Grid>\r\n    </AuthWrapper1>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}